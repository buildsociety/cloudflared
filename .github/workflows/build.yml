name: build

on:
  push:
    branches:
      - 'master'
    tags:
      - '*'
    paths-ignore:
      - '**.md'
  pull_request:
    branches:
      - 'master'
    paths-ignore:
      - '**.md'
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:

jobs:
  prep:
    runs-on: ubuntu-latest
    env:
      DOCKER_USERNAME: buildsocietybot
      DOCKER_IMAGE: buildsociety/cloudflared
      DOCKER_PLATFORMS: linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64,linux/386,linux/ppc64le,linux/s390x
    steps:
      -
        name: Prepare
        id: prepare
        run: |
          VERSION=$(git -c 'versionsort.suffix=-'     ls-remote --exit-code --refs --sort='version:refname' --tags https://github.com/cloudflare/cloudflared '*.*.*'     | tail --lines=1     | cut --delimiter='/' --fields=3)
          echo version=${VERSION} >> $GITHUB_OUTPUT
      # -
      #   name: Set up Docker Buildx
      #   uses: crazy-max/ghaction-docker-buildx@v3.3.1
      -
        name: Checkout
        uses: actions/checkout@v3
      - name: Checkout Cloudflared
        uses: actions/checkout@v3
        with:
          repository: 'cloudflare/cloudflared'
          path: 'cloudflared'
          ref: ${{ steps.prepare.outputs.version }}

      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      -
        name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
  build:
    runs-on: ubuntu-latest
    env:
      DOCKER_USERNAME: buildsocietybot
      DOCKER_IMAGE: buildsociety/cloudflared
      DOCKER_PLATFORMS: linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64,linux/386,linux/ppc64le,linux/s390x
    strategy:
      fail-fast: false
      matrix:
        platforms:
          - linux/amd64
          - linux/arm/v6
          - linux/arm/v7
          - linux/arm64
          - linux/386
          - linux/ppc64le
          - linux/s390x
    steps:
      -
        name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile
          platforms: ${{ matrix.platforms }}
          push: true
          tags: |
            buildsociety/cloudflared:latest
            buildsociety/cloudflared:${{ steps.prepare.outputs.version }}
            ghcr.io/buildsociety/cloudflared:latest
            ghcr.io/buildsociety/cloudflared:${{ steps.prepare.outputs.version }}
          build-args: |
            VERSION=${{ steps.prepare.outputs.version }}
            BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
            VCS_REF=${GITHUB_SHA::8}


      # -
      #   name: Docker Buildx (build)
      #   run: |
      #     docker buildx build --output "type=image,push=false" ${{ steps.prepare.outputs.buildx_args }}
      # -
      #   name: Docker Login
      #   if: success() && github.event_name != 'pull_request' && (endsWith(github.ref, github.event.repository.default_branch) || startsWith(github.ref, 'refs/tags/'))
      #   env:
      #     DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      #   run: |
      #     echo "${DOCKER_PASSWORD}" | docker login --username "${{ steps.prepare.outputs.docker_username }}" --password-stdin
      # -
      #   name: Docker Buildx (push)
      #   if: success() && github.event_name != 'pull_request' && (endsWith(github.ref, github.event.repository.default_branch) || startsWith(github.ref, 'refs/tags/'))
      #   run: |
      #     docker buildx build --output "type=image,push=true" ${{ steps.prepare.outputs.buildx_args }}
      # -
      #   name: Docker Check Manifest
      #   if: success() && github.event_name != 'pull_request' && (endsWith(github.ref, github.event.repository.default_branch) || startsWith(github.ref, 'refs/tags/'))
      #   run: |
      #     docker run --rm mplatform/mquery ${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.version }}
      # -
      #   name: Clear
      #   if: always() && github.event_name != 'pull_request' && (endsWith(github.ref, github.event.repository.default_branch) || startsWith(github.ref, 'refs/tags/'))
      #   run: |
      #     rm -f ${HOME}/.docker/config.json
